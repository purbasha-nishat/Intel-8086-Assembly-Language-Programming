
1705067_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000001b4  00000248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800072  00800072  0000025a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000028c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000002c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c7  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005c3  00000000  00000000  000009b7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e0  00000000  00000000  00000f7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000048  00000000  00000000  0000125c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035e  00000000  00000000  000012a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000143  00000000  00000000  00001602  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001745  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 eb       	ldi	r30, 0xB4	; 180
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e7       	ldi	r26, 0x72	; 114
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 62 00 	call	0xc4	; 0xc4 <main>
  8a:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__vector_3>:

volatile unsigned int staticV = 1;
volatile unsigned int count;

ISR(INT2_vect)
{
  92:	1f 92       	push	r1
  94:	0f 92       	push	r0
  96:	0f b6       	in	r0, 0x3f	; 63
  98:	0f 92       	push	r0
  9a:	11 24       	eor	r1, r1
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	staticV = -staticV;
  a0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  a4:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  a8:	91 95       	neg	r25
  aa:	81 95       	neg	r24
  ac:	91 09       	sbc	r25, r1
  ae:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  b2:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
}
  b6:	9f 91       	pop	r25
  b8:	8f 91       	pop	r24
  ba:	0f 90       	pop	r0
  bc:	0f be       	out	0x3f, r0	; 63
  be:	0f 90       	pop	r0
  c0:	1f 90       	pop	r1
  c2:	18 95       	reti

000000c4 <main>:


int main(void)
{
	DDRA = 0b11111111; //ROW
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
	DDRD = 0b11111111; //COLUMN
  c8:	81 bb       	out	0x11, r24	; 17
	DDRB = 0b00000000;
  ca:	17 ba       	out	0x17, r1	; 23
	int i = 0;
	int j = 0;
	GICR = (1<<INT2); 
  cc:	80 e2       	ldi	r24, 0x20	; 32
  ce:	8b bf       	out	0x3b, r24	; 59
	MCUCSR = MCUCSR & 0b10111111;
  d0:	84 b7       	in	r24, 0x34	; 52
  d2:	8f 7b       	andi	r24, 0xBF	; 191
  d4:	84 bf       	out	0x34, r24	; 52
	sei();
  d6:	78 94       	sei
int main(void)
{
	DDRA = 0b11111111; //ROW
	DDRD = 0b11111111; //COLUMN
	DDRB = 0b00000000;
	int i = 0;
  d8:	80 e0       	ldi	r24, 0x00	; 0
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	4a e6       	ldi	r20, 0x6A	; 106
  de:	50 e0       	ldi	r21, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <main+0x22>
				PORTD = array_column[i];
				_delay_ms(2);
				i++;
				if(i==8) i=0;	
			}
			i=0;	
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e0       	ldi	r25, 0x00	; 0
	MCUCSR = MCUCSR & 0b10111111;
	sei();
	
    while (1) 
    {
		if(staticV== 1){
  e6:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
  ea:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  ee:	21 30       	cpi	r18, 0x01	; 1
  f0:	31 05       	cpc	r19, r1
  f2:	c1 f4       	brne	.+48     	; 0x124 <main+0x60>
			PORTA = ~array_row[i];
  f4:	fc 01       	movw	r30, r24
  f6:	e6 59       	subi	r30, 0x96	; 150
  f8:	ff 4f       	sbci	r31, 0xFF	; 255
  fa:	20 81       	ld	r18, Z
  fc:	20 95       	com	r18
  fe:	2b bb       	out	0x1b, r18	; 27
			PORTD = array_column[i];
 100:	fc 01       	movw	r30, r24
 102:	ee 59       	subi	r30, 0x9E	; 158
 104:	ff 4f       	sbci	r31, 0xFF	; 255
 106:	20 81       	ld	r18, Z
 108:	22 bb       	out	0x12, r18	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	e3 ef       	ldi	r30, 0xF3	; 243
 10c:	f1 e0       	ldi	r31, 0x01	; 1
 10e:	31 97       	sbiw	r30, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <main+0x4a>
 112:	00 c0       	rjmp	.+0      	; 0x114 <main+0x50>
 114:	00 00       	nop
			_delay_ms(2);
			i++;
 116:	01 96       	adiw	r24, 0x01	; 1
			if(i>7) i=0;
 118:	88 30       	cpi	r24, 0x08	; 8
 11a:	91 05       	cpc	r25, r1
 11c:	24 f3       	brlt	.-56     	; 0xe6 <main+0x22>
 11e:	80 e0       	ldi	r24, 0x00	; 0
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	e1 cf       	rjmp	.-62     	; 0xe6 <main+0x22>
		}
		else if(staticV == -1){
 124:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 128:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 12c:	2f 3f       	cpi	r18, 0xFF	; 255
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	d1 f6       	brne	.-76     	; 0xe6 <main+0x22>
 132:	e2 e6       	ldi	r30, 0x62	; 98
 134:	f0 e0       	ldi	r31, 0x00	; 0
			for (j = 0; j < 8; j++)
			{
				array_column[j] = array_column[j]<<1 | array_column[j]>>7;
 136:	20 81       	ld	r18, Z
 138:	22 0f       	add	r18, r18
 13a:	21 1d       	adc	r18, r1
 13c:	21 93       	st	Z+, r18
			_delay_ms(2);
			i++;
			if(i>7) i=0;
		}
		else if(staticV == -1){
			for (j = 0; j < 8; j++)
 13e:	e4 17       	cp	r30, r20
 140:	f5 07       	cpc	r31, r21
 142:	c9 f7       	brne	.-14     	; 0x136 <main+0x72>
			{
				array_column[j] = array_column[j]<<1 | array_column[j]>>7;
			}
			for (count = 0; count < 150; count++)
 144:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <__data_end+0x1>
 148:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <__data_end>
 14c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 150:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 154:	26 39       	cpi	r18, 0x96	; 150
 156:	31 05       	cpc	r19, r1
 158:	20 f6       	brcc	.-120    	; 0xe2 <main+0x1e>
			{
				PORTA = ~array_row[i];
 15a:	fc 01       	movw	r30, r24
 15c:	e6 59       	subi	r30, 0x96	; 150
 15e:	ff 4f       	sbci	r31, 0xFF	; 255
 160:	20 81       	ld	r18, Z
 162:	20 95       	com	r18
 164:	2b bb       	out	0x1b, r18	; 27
				PORTD = array_column[i];
 166:	fc 01       	movw	r30, r24
 168:	ee 59       	subi	r30, 0x9E	; 158
 16a:	ff 4f       	sbci	r31, 0xFF	; 255
 16c:	20 81       	ld	r18, Z
 16e:	22 bb       	out	0x12, r18	; 18
 170:	e3 ef       	ldi	r30, 0xF3	; 243
 172:	f1 e0       	ldi	r31, 0x01	; 1
 174:	31 97       	sbiw	r30, 0x01	; 1
 176:	f1 f7       	brne	.-4      	; 0x174 <main+0xb0>
 178:	00 c0       	rjmp	.+0      	; 0x17a <main+0xb6>
 17a:	00 00       	nop
				_delay_ms(2);
				i++;
 17c:	01 96       	adiw	r24, 0x01	; 1
				if(i==8) i=0;	
 17e:	88 30       	cpi	r24, 0x08	; 8
 180:	91 05       	cpc	r25, r1
 182:	11 f4       	brne	.+4      	; 0x188 <main+0xc4>
 184:	80 e0       	ldi	r24, 0x00	; 0
 186:	90 e0       	ldi	r25, 0x00	; 0
		else if(staticV == -1){
			for (j = 0; j < 8; j++)
			{
				array_column[j] = array_column[j]<<1 | array_column[j]>>7;
			}
			for (count = 0; count < 150; count++)
 188:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 18c:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 190:	2f 5f       	subi	r18, 0xFF	; 255
 192:	3f 4f       	sbci	r19, 0xFF	; 255
 194:	30 93 73 00 	sts	0x0073, r19	; 0x800073 <__data_end+0x1>
 198:	20 93 72 00 	sts	0x0072, r18	; 0x800072 <__data_end>
 19c:	20 91 72 00 	lds	r18, 0x0072	; 0x800072 <__data_end>
 1a0:	30 91 73 00 	lds	r19, 0x0073	; 0x800073 <__data_end+0x1>
 1a4:	26 39       	cpi	r18, 0x96	; 150
 1a6:	31 05       	cpc	r19, r1
 1a8:	c0 f2       	brcs	.-80     	; 0x15a <main+0x96>
				PORTD = array_column[i];
				_delay_ms(2);
				i++;
				if(i==8) i=0;	
			}
			i=0;	
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	9b cf       	rjmp	.-202    	; 0xe6 <main+0x22>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
